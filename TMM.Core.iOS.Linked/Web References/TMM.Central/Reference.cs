// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace TMM.Core.iOS.Linked.TMM.Central {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="TmmServiceHttpSoap11Endpoint", Namespace="http://webservice.tmm")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TmmService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback signInOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback logInOperationCompleted;
        
        private System.Threading.SendOrPostCallback addServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFramesForOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsersForOperationCompleted;
        
        private System.Threading.SendOrPostCallback frameActivatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServicesForOperationCompleted;
        
        public TmmService() {
            this.Url = "http://localhost:8080/TMM/services/TmmService.TmmServiceHttpSoap11Endpoint/";
        }
        
        public TmmService(string url) {
            this.Url = url;
        }
        
        public event signInCompletedEventHandler signInCompleted;
        
        public event removeServiceCompletedEventHandler removeServiceCompleted;
        
        public event logInCompletedEventHandler logInCompleted;
        
        public event addServiceCompletedEventHandler addServiceCompleted;
        
        public event updateServiceCompletedEventHandler updateServiceCompleted;
        
        public event getFramesForCompletedEventHandler getFramesForCompleted;
        
        public event getUsersForCompletedEventHandler getUsersForCompleted;
        
        public event frameActivatedCompletedEventHandler frameActivatedCompleted;
        
        public event getServicesForCompletedEventHandler getServicesForCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:signIn", RequestNamespace="http://webservice.tmm", ResponseNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public User signIn([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string publicIp) {
            object[] results = this.Invoke("signIn", new object[] {
                        name,
                        password,
                        publicIp});
            return ((User)(results[0]));
        }
        
        public System.IAsyncResult BeginsignIn(string name, string password, string publicIp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("signIn", new object[] {
                        name,
                        password,
                        publicIp}, callback, asyncState);
        }
        
        public User EndsignIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((User)(results[0]));
        }
        
        public void signInAsync(string name, string password, string publicIp) {
            this.signInAsync(name, password, publicIp, null);
        }
        
        public void signInAsync(string name, string password, string publicIp, object userState) {
            if ((this.signInOperationCompleted == null)) {
                this.signInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsignInCompleted);
            }
            this.InvokeAsync("signIn", new object[] {
                        name,
                        password,
                        publicIp}, this.signInOperationCompleted, userState);
        }
        
        private void OnsignInCompleted(object arg) {
            if ((this.signInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.signInCompleted(this, new signInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:removeService", RequestNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void removeService([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Service service) {
            this.Invoke("removeService", new object[] {
                        service});
        }
        
        public System.IAsyncResult BeginremoveService(Service service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("removeService", new object[] {
                        service}, callback, asyncState);
        }
        
        public void EndremoveService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void removeServiceAsync(Service service) {
            this.removeServiceAsync(service, null);
        }
        
        public void removeServiceAsync(Service service, object userState) {
            if ((this.removeServiceOperationCompleted == null)) {
                this.removeServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveServiceCompleted);
            }
            this.InvokeAsync("removeService", new object[] {
                        service}, this.removeServiceOperationCompleted, userState);
        }
        
        private void OnremoveServiceCompleted(object arg) {
            if ((this.removeServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:logIn", RequestNamespace="http://webservice.tmm", ResponseNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public User logIn([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string publicIp) {
            object[] results = this.Invoke("logIn", new object[] {
                        name,
                        password,
                        publicIp});
            return ((User)(results[0]));
        }
        
        public System.IAsyncResult BeginlogIn(string name, string password, string publicIp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("logIn", new object[] {
                        name,
                        password,
                        publicIp}, callback, asyncState);
        }
        
        public User EndlogIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((User)(results[0]));
        }
        
        public void logInAsync(string name, string password, string publicIp) {
            this.logInAsync(name, password, publicIp, null);
        }
        
        public void logInAsync(string name, string password, string publicIp, object userState) {
            if ((this.logInOperationCompleted == null)) {
                this.logInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogInCompleted);
            }
            this.InvokeAsync("logIn", new object[] {
                        name,
                        password,
                        publicIp}, this.logInOperationCompleted, userState);
        }
        
        private void OnlogInCompleted(object arg) {
            if ((this.logInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logInCompleted(this, new logInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:addService", RequestNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void addService([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Service service) {
            this.Invoke("addService", new object[] {
                        service});
        }
        
        public System.IAsyncResult BeginaddService(Service service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("addService", new object[] {
                        service}, callback, asyncState);
        }
        
        public void EndaddService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void addServiceAsync(Service service) {
            this.addServiceAsync(service, null);
        }
        
        public void addServiceAsync(Service service, object userState) {
            if ((this.addServiceOperationCompleted == null)) {
                this.addServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddServiceCompleted);
            }
            this.InvokeAsync("addService", new object[] {
                        service}, this.addServiceOperationCompleted, userState);
        }
        
        private void OnaddServiceCompleted(object arg) {
            if ((this.addServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:updateService", RequestNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, OneWay=true, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void updateService([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] Service service) {
            this.Invoke("updateService", new object[] {
                        service});
        }
        
        public System.IAsyncResult BeginupdateService(Service service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("updateService", new object[] {
                        service}, callback, asyncState);
        }
        
        public void EndupdateService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void updateServiceAsync(Service service) {
            this.updateServiceAsync(service, null);
        }
        
        public void updateServiceAsync(Service service, object userState) {
            if ((this.updateServiceOperationCompleted == null)) {
                this.updateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateServiceCompleted);
            }
            this.InvokeAsync("updateService", new object[] {
                        service}, this.updateServiceOperationCompleted, userState);
        }
        
        private void OnupdateServiceCompleted(object arg) {
            if ((this.updateServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getFramesFor", RequestNamespace="http://webservice.tmm", ResponseNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public Frame[] getFramesFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string publicIp) {
            object[] results = this.Invoke("getFramesFor", new object[] {
                        publicIp});
            return ((Frame[])(results[0]));
        }
        
        public System.IAsyncResult BegingetFramesFor(string publicIp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getFramesFor", new object[] {
                        publicIp}, callback, asyncState);
        }
        
        public Frame[] EndgetFramesFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Frame[])(results[0]));
        }
        
        public void getFramesForAsync(string publicIp) {
            this.getFramesForAsync(publicIp, null);
        }
        
        public void getFramesForAsync(string publicIp, object userState) {
            if ((this.getFramesForOperationCompleted == null)) {
                this.getFramesForOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFramesForCompleted);
            }
            this.InvokeAsync("getFramesFor", new object[] {
                        publicIp}, this.getFramesForOperationCompleted, userState);
        }
        
        private void OngetFramesForCompleted(object arg) {
            if ((this.getFramesForCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFramesForCompleted(this, new getFramesForCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getUsersFor", RequestNamespace="http://webservice.tmm", ResponseNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public User[] getUsersFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string publicIp) {
            object[] results = this.Invoke("getUsersFor", new object[] {
                        publicIp});
            return ((User[])(results[0]));
        }
        
        public System.IAsyncResult BegingetUsersFor(string publicIp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getUsersFor", new object[] {
                        publicIp}, callback, asyncState);
        }
        
        public User[] EndgetUsersFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((User[])(results[0]));
        }
        
        public void getUsersForAsync(string publicIp) {
            this.getUsersForAsync(publicIp, null);
        }
        
        public void getUsersForAsync(string publicIp, object userState) {
            if ((this.getUsersForOperationCompleted == null)) {
                this.getUsersForOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsersForCompleted);
            }
            this.InvokeAsync("getUsersFor", new object[] {
                        publicIp}, this.getUsersForOperationCompleted, userState);
        }
        
        private void OngetUsersForCompleted(object arg) {
            if ((this.getUsersForCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsersForCompleted(this, new getUsersForCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:frameActivated", RequestNamespace="http://webservice.tmm", ResponseNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public Frame frameActivated([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string publicIp) {
            object[] results = this.Invoke("frameActivated", new object[] {
                        name,
                        publicIp});
            return ((Frame)(results[0]));
        }
        
        public System.IAsyncResult BeginframeActivated(string name, string publicIp, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("frameActivated", new object[] {
                        name,
                        publicIp}, callback, asyncState);
        }
        
        public Frame EndframeActivated(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Frame)(results[0]));
        }
        
        public void frameActivatedAsync(string name, string publicIp) {
            this.frameActivatedAsync(name, publicIp, null);
        }
        
        public void frameActivatedAsync(string name, string publicIp, object userState) {
            if ((this.frameActivatedOperationCompleted == null)) {
                this.frameActivatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnframeActivatedCompleted);
            }
            this.InvokeAsync("frameActivated", new object[] {
                        name,
                        publicIp}, this.frameActivatedOperationCompleted, userState);
        }
        
        private void OnframeActivatedCompleted(object arg) {
            if ((this.frameActivatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.frameActivatedCompleted(this, new frameActivatedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getServicesFor", RequestNamespace="http://webservice.tmm", ResponseNamespace="http://webservice.tmm", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public Service[] getServicesFor([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName) {
            object[] results = this.Invoke("getServicesFor", new object[] {
                        userName});
            return ((Service[])(results[0]));
        }
        
        public System.IAsyncResult BegingetServicesFor(string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getServicesFor", new object[] {
                        userName}, callback, asyncState);
        }
        
        public Service[] EndgetServicesFor(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Service[])(results[0]));
        }
        
        public void getServicesForAsync(string userName) {
            this.getServicesForAsync(userName, null);
        }
        
        public void getServicesForAsync(string userName, object userState) {
            if ((this.getServicesForOperationCompleted == null)) {
                this.getServicesForOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServicesForCompleted);
            }
            this.InvokeAsync("getServicesFor", new object[] {
                        userName}, this.getServicesForOperationCompleted, userState);
        }
        
        private void OngetServicesForCompleted(object arg) {
            if ((this.getServicesForCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServicesForCompleted(this, new getServicesForCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://entities.tmm/xsd")]
    public partial class User {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string password;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string publicIp;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://entities.tmm/xsd")]
    public partial class Service {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string owner;
        
        /// <remarks/>
        public int serviceId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool serviceIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string url;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://entities.tmm/xsd")]
    public partial class Frame {
        
        /// <remarks/>
        public int frameId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnore()]
        public bool frameIdSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string publicIp;
    }
    
    public partial class signInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal signInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    public delegate void signInCompletedEventHandler(object sender, signInCompletedEventArgs args);
    
    public delegate void removeServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class logInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    public delegate void logInCompletedEventHandler(object sender, logInCompletedEventArgs args);
    
    public delegate void addServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void updateServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public partial class getFramesForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFramesForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Frame[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Frame[])(this.results[0]));
            }
        }
    }
    
    public delegate void getFramesForCompletedEventHandler(object sender, getFramesForCompletedEventArgs args);
    
    public partial class getUsersForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsersForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public User[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User[])(this.results[0]));
            }
        }
    }
    
    public delegate void getUsersForCompletedEventHandler(object sender, getUsersForCompletedEventArgs args);
    
    public partial class frameActivatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal frameActivatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Frame Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Frame)(this.results[0]));
            }
        }
    }
    
    public delegate void frameActivatedCompletedEventHandler(object sender, frameActivatedCompletedEventArgs args);
    
    public partial class getServicesForCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServicesForCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Service[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Service[])(this.results[0]));
            }
        }
    }
    
    public delegate void getServicesForCompletedEventHandler(object sender, getServicesForCompletedEventArgs args);
}
